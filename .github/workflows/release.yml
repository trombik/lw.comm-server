---
name: Release CI
on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{ matrix.RUNNER_PLATFORM }}
    strategy:
      matrix:
        version:
          - linux-amd64
          - macos-amd64
          - windows-amd64
            # XXX probably, 32 bit Windows is not so common, but still being
            # used.
            # https://github.com/LaserWeb/LaserWeb4/issues/592
          - windows-i386
        include:
          # XXX all of variables defined here are required. use empty string,
          # "", or `${{ false }}` for BUILD_DEPEND if you do not need. GitHub
          # Action will refuse to run the workflow if any of them are not
          # defined.
          #
          # OS: used in many `if:` and in artifact names to identify artifact.
          # ARCH: used in artifact names to identify artifact.
          # RUNNER_PLATFORM: used in `runs-on:` to choose platform of the
          # runner.
          # ELECTRON_BUILDER_FLAGS: extra flags to pass when building code
          # with electron-builder.
          # BUILD_DEPEND: space-separated list of package names to install
          # before the build
          # BUILD_ARTIFACT_FILE_EXT: file extension of artifacts. files with
          # this string at the end will be considered as artifacts.
          # PKG_INSTALL_CMD: command to install BUILD_DEPEND
          - version: linux-amd64
            OS: linux
            ARCH: amd64
            RUNNER_PLATFORM: ubuntu-latest
            ELECTRON_BUILDER_FLAGS: --linux AppImage --x64
            BUILD_DEPEND: graphicsmagick xz-utils
            PKG_INSTALL_CMD: sudo apt-get install
          - version: macos-amd64
            OS: macos
            ARCH: amd64
            RUNNER_PLATFORM: macos-latest
            ELECTRON_BUILDER_FLAGS: --macos
            BUILD_DEPEND: ${{ false }}
            PKG_INSTALL_CMD: brew install
          - version: windows-i386
            OS: windows
            ARCH: i386
            RUNNER_PLATFORM: windows-latest
            ELECTRON_BUILDER_FLAGS: --windows --ia32
            BUILD_DEPEND: ${{ false }}
            PKG_INSTALL_CMD: ""
          - version: windows-amd64
            OS: windows
            ARCH: amd64
            RUNNER_PLATFORM: windows-latest
            ELECTRON_BUILDER_FLAGS: --windows --x64
            BUILD_DEPEND: ${{ false }}
            PKG_INSTALL_CMD: ""
        node-version:
          # include 10.x only. serialport for 12.x is not available probably
          # because it does not support 12.x.
          #
          # "No prebuilt binaries found (target=12.18.1 runtime=node arch=x64 platform=linux)'
          - 10.x
    steps:
      - name: Install required packages
        if: matrix.BUILD_DEPEND
        run: ${{ matrix.PKG_INSTALL_CMD }} ${{ matrix.BUILD_DEPEND }}

      - name: Checkout lw.comm-server
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Get npm cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache npm
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run yarn
        shell: bash
        run: |
          yarn --frozen-lockfile

      - name: Prepare
        shell: bash
        run: |
          yarn prep

      - name: Build LaserWeb4
        shell: bash
        run: |
          yarn build-LaserWeb4

      - name: Bundle LaserWeb4
        shell: bash
        run: |
          yarn bundle-LaserWeb4

      - name: Build (Unix)
        if: matrix.OS != 'windows'
        run: |
          cd LaserWeb4
          # remove `v` from semver because Windows does not like string in
          # version number.
          UI_VERSION=$(git describe --abbrev=0 --tags | tr -d 'v')

          cd ${GITHUB_WORKSPACE}
          SERVER_VERSION=$(cat version.txt | cut -c 3-6)
          ./node_modules/.bin/electron-builder build --config.buildVersion=$UI_VERSION -p never ${{ matrix.ELECTRON_BUILDER_FLAGS }}

      - name: Build (Windows)
        if: matrix.OS == 'windows'
        shell: bash
        run: |
          cd LaserWeb4
          # remove `v` from semver because Windows does not like string in
          # version number.
          UI_VERSION=$(git describe --abbrev=0 --tags | tr -d 'v')

          cd ${GITHUB_WORKSPACE}
          SERVER_VERSION=$(cat version.txt | cut -c 3-6)
          node_modules\\.bin\\electron-builder build --config.buildVersion=$UI_VERSION -p never ${{ matrix.ELECTRON_BUILDER_FLAGS }}

      - name: Upload build artifact (Unix)
        if: matrix.OS != 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: lw.comm-server-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}
          path: |
            ${{ github.workspace }}/dist/*.AppImage
            ${{ github.workspace }}/dist/*.snap
            ${{ github.workspace }}/dist/*.zip
            ${{ github.workspace }}/dist/*.dmg
            ${{ github.workspace }}/dist/*.exe
            ${{ github.workspace }}/dist/*.rpm
            ${{ github.workspace }}/dist/*.deb
            ${{ github.workspace }}/dist/*.tar.gz

      - name: Upload build artifact (Windows)
        if: matrix.OS == 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: lw.comm-server-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}
          path: |
            ${{ github.workspace }}\\dist\\*.AppImage
            ${{ github.workspace }}\\dist\\*.snap
            ${{ github.workspace }}\\dist\\*.zip
            ${{ github.workspace }}\\dist\\*.dmg
            ${{ github.workspace }}\\dist\\*.exe
            ${{ github.workspace }}\\dist\\*.rpm
            ${{ github.workspace }}\\dist\\*.deb
            ${{ github.workspace }}\\dist\\*.tar.gz
  release:
    # runs only when tag starts with 'v'
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          # if tag ends with `-pre`, make the release prerelease
          prerelease: ${{ endsWith(github.ref, '-pre') }}

      - name: Copy release URL into file
        run: |
          mkdir release
          printf "%s" "${{ steps.create_release.outputs.upload_url }}" > release/url.txt

      - name: Upload file containing the release URL as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: release-url
          path: ./release

  upload:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        version:
          - linux-amd64
          - macos-amd64
          - windows-amd64
          - windows-i386
        include:
          - version: linux-amd64
            OS: linux
            ARCH: amd64
            ARTIFACT_EXT: AppImage
          - version: macos-amd64
            OS: macos
            ARCH: amd64
            ARTIFACT_EXT: dmg
          - version: windows-amd64
            OS: windows
            ARCH: amd64
            ARTIFACT_EXT: exe
          - version: windows-i386
            OS: windows
            ARCH: i386
            ARTIFACT_EXT: exe
    steps:
    - name: Get the version (git tag)
      id: get_version
      run: |
        echo ${GITHUB_REF/refs\/tags\//}
        echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Retrieve stashed intermediary build artifact
      uses: actions/download-artifact@v1
      with:
        name: lw.comm-server-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}
    # rename the retrieved intermediary artifact and prepare zip file
    - name: Prepare release artifact
      id: relese-file
      env:
        VERSION: ${{ steps.get_version.outputs.VERSION }}
      run: |
        FILE_NAME=lw.comm-server-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ steps.get_version.outputs.VERSION }}.${{ matrix.ARTIFACT_EXT }}
        FILE_PATH=`echo lw.comm-server-${{ matrix.OS }}-${{ matrix.ARCH }}-${{ github.sha }}/*.${{ matrix.ARTIFACT_EXT }}`
        case ${{ matrix.ARTIFACT_EXT }} in
        dmg)
          MIME_TYPE="application/x-apple-diskimage"
          ;;
        *)
          MIME_TYPE="application/octet-stream"
          ;;
        esac
        echo ::set-output name=PATH::${FILE_PATH}
        echo ::set-output name=FILENAME::${FILE_NAME}
        echo ::set-output name=MIME_TYPE::${MIME_TYPE}
    # Download the previously uploaded artifact which contains the release URL
    - name: Retrieve stashed release URL
      uses: actions/download-artifact@v1
      with:
        name: release-url
    # Write content of downloaded file (a string which contains the release URL) into a step.outputs variable
    - name: Read release URL
      id: get_release_url
      run: echo ::set-output name=URL::$(cat release-url/url.txt)
    # Finally upload the artifact to the corresponding release
    - name: Upload Release Artifact ${{ matrix.version }}
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.URL }}
        asset_path: ${{ steps.relese-file.outputs.PATH }}
        asset_name: ${{ steps.relese-file.outputs.FILENAME }}
        asset_content_type: ${{ steps.relese-file.outputs.MIME_TYPE }}
